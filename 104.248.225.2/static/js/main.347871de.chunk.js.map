{"version":3,"sources":["components/reverser.jsx","components/summation.jsx","App.js","serviceWorker.js","index.js"],"names":["Reverser","state","num","reverseNum","handleChange","e","setState","target","value","handleSubmit","axios","post","then","res","data","className","htmlFor","type","this","id","onChange","placeholder","onClick","style","width","Component","Summation","sumNum","name","sum","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAsDeA,E,4MAhDXC,MAAQ,CACJC,IAAI,GACJC,WAAY,I,EAGhBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACJ,IAAIG,EAAEE,OAAOC,S,EAGhCC,aAAa,WACTC,IAAMC,KAAN,YAAwB,EAAKV,OAC5BW,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAACH,WAAWU,EAAIC,KAAKZ,U,uDAMrC,OACI,yBAAKa,UAAU,iBACX,0BAAMA,UAAU,eACZ,yBAAKA,UAAU,2BACX,2BAAOC,QAAQ,SAASD,UAAU,WAAlC,UACA,2BAAOE,KAAK,SACRT,MAASU,KAAKjB,MAAMC,IACpBa,UAAU,eACVI,GAAG,SACHC,SAAUF,KAAKd,aACfiB,YAAY,UAEtB,4BAAQJ,KAAK,SAASF,UAAU,uBAAuBO,QAASJ,KAAKT,cAArE,WAGF,yBAAKM,UAAW,OAAOQ,MAAO,CAACC,MAAO,UACpC,yBAAKT,UAAW,aACd,wBAAIA,UAAW,cAAf,kBACA,wBAAIA,UAAW,iCAAf,8BACA,uBAAGA,UAAW,aAAaG,KAAKjB,MAAME,WAAWe,KAAKjB,MAAME,WAAW,W,GAtCpEsB,a,QCkDRC,E,4MAjDXzB,MAAQ,CACJC,IAAI,GACJyB,OAAQ,I,EAGZvB,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAEE,OAAOqB,KAAMvB,EAAEE,OAAOC,S,EAG5CC,aAAa,WACTC,IAAMC,KAAN,aAAyB,EAAKV,OAC7BW,MAAK,SAAAC,GACJ,EAAKP,SAAS,CAACqB,OAAOd,EAAIC,KAAKe,U,uDAOjC,OACI,yBAAKd,UAAU,iBACX,0BAAMA,UAAU,eACZ,yBAAKA,UAAU,2BACX,2BAAOC,QAAQ,SAASD,UAAU,WAAlC,UACA,2BAAOE,KAAK,SACRT,MAASU,KAAKjB,MAAMC,IACpBa,UAAU,eACVa,KAAQ,MACRR,SAAUF,KAAKd,aACfiB,YAAY,UAEtB,4BAAQJ,KAAK,SAASF,UAAU,uBAAuBO,QAASJ,KAAKT,cAArE,WAGF,yBAAKM,UAAW,OAAOQ,MAAO,CAACC,MAAO,UACpC,yBAAKT,UAAW,aACd,wBAAIA,UAAW,cAAf,aACA,wBAAIA,UAAW,iCAAf,8BACA,uBAAGA,UAAW,aAAaG,KAAKjB,MAAM0B,OAAOT,KAAKjB,MAAM0B,OAAO,W,GAvC3DF,aCUTK,MATf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,kBCEcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.347871de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n\nclass Reverser extends Component {\n    state = { \n        num:\"\",\n        reverseNum: \"\"\n     }\n\n    handleChange = (e) =>{\n        this.setState({num:e.target.value})\n    }\n\n    handleSubmit=()=>{\n        axios.post(`/reverser`, this.state)\n        .then(res => {\n          this.setState({reverseNum:res.data.num})\n        })\n    }\n\n    render() { \n\n        return ( \n            <div className=\"container p-5\"  >\n                <form className=\"form-inline\">\n                    <div className=\"form-group mx-sm-3 mb-2\">\n                        <label htmlFor=\"number\" className=\"sr-only\">Number</label>\n                        <input type=\"number\"\n                            value = {this.state.num} \n                            className=\"form-control\" \n                            id=\"number\" \n                            onChange={this.handleChange} \n                            placeholder=\"1234\"/>\n                    </div>\n                  <button type=\"button\" className=\"btn btn-primary mb-2\" onClick={this.handleSubmit}>submit</button>\n                </form>\n                \n                <div className =\"card\" style={{width: \"18rem\"}}>\n                  <div className =\"card-body\">\n                    <h5 className =\"card-title\">Reverse Number</h5>\n                    <h6 className =\"card-subtitle mb-2 text-muted\">Click kore dekhe nao magic</h6>\n                    <p className =\"card-text\">{this.state.reverseNum?this.state.reverseNum:\"\"}</p>\n                  </div>\n                </div>\n\n\n            </div>\n\n         );\n    }\n}\n \nexport default Reverser;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n\nclass Summation extends Component {\n    state = { \n        num:\"\",\n        sumNum: \"\"\n     }\n\n    handleChange = (e) =>{\n        this.setState({[e.target.name]:e.target.value})\n    }\n\n    handleSubmit=()=>{\n        axios.post(`/summation`, this.state)\n        .then(res => {\n          this.setState({sumNum:res.data.sum})\n        })\n\n    }\n\n    render() { \n\n        return ( \n            <div className=\"container p-5\"  >\n                <form className=\"form-inline\">\n                    <div className=\"form-group mx-sm-3 mb-2\">\n                        <label htmlFor=\"number\" className=\"sr-only\">Number</label>\n                        <input type=\"number\"\n                            value = {this.state.num} \n                            className=\"form-control\" \n                            name =  \"num\"\n                            onChange={this.handleChange} \n                            placeholder=\"1234\"/>\n                    </div>\n                  <button type=\"button\" className=\"btn btn-primary mb-2\" onClick={this.handleSubmit}>submit</button>\n                </form>\n                \n                <div className =\"card\" style={{width: \"18rem\"}}>\n                  <div className =\"card-body\">\n                    <h5 className =\"card-title\">Summation</h5>\n                    <h6 className =\"card-subtitle mb-2 text-muted\">Click kore dekhe nao magic</h6>\n                    <p className =\"card-text\">{this.state.sumNum?this.state.sumNum:\"\"}</p>\n                  </div>\n                </div>\n\n\n            </div>\n\n         );\n    }\n}\n \nexport default Summation;","import React from 'react';\nimport './App.css';\nimport Reverser from './components/reverser';\nimport Summation from './components/summation';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Reverser/>\n      <Summation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}